apply plugin: "java"
apply plugin: "jacoco"

sourceCompatibility = 1.6
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = [ "src/main/" ]
sourceSets.test.java.srcDirs = [ "src/test/" ]

dependencies {
    compile fileTree(dir: '../libs', include: '*.jar')
    compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    compile "com.kotcrab.vis:vis-ui:1.0.1"
    compile 'org.jetbrains:annotations-java5:15.0'

    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.10.19"
}

eclipse.project {
    name = appName + "-core"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task jacocoReport(type: JacocoReport, dependsOn: 'test') {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running tests.'

    reports {
        xml {
            enabled = true
            destination "${buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${buildDir}/reports/jacoco"
        }
    }

    classDirectories = fileTree(
            dir: 'build/classes/main',
            excludes: [
                    '**/*$$*'
            ]
    )

    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/test.exec')

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}